from abc import ABC, abstractmethod
import serial

ser = serial.Serial('COM', 9600)


class Motor:

    def __init__(GND, VCC): 
        self.GND = GND 
        self.VCC = VCC

    @abstractmethod
    def send_parameter(parameter):
        pass 
    
        
class MotorDC(Motor):

    def send_parameter(character):

        ser.write(character.encode())
        print(f"sent: {character}")
    
class Servomotor(Motor):

    def __init__(GND, VCC, PWM_pin):
        super().__init__(GND, VCC) 
        PWM_pin = PWM_pin

    def send_parameter(character):

        ser.write(character.encode())
        print(f"sent: {character}")
            
class Sensor:

    def __init__(voltage_capacity, GND, VCC, trigger_pin, echo_pin, max_distance):
        self.voltage_capacity = voltage_capacity 
        self.GND = GND 
        self.VCC = VCC 
        self.trigger_pin = trigger_pin 
        self.echo_pin = echo_pin 
        self.max_distance = max_distance

   
    def send_instructions():

        right, left = ser.read() 

        dir_ = {'right' = right, 'left' = left}

        for direction, distance in dir_.items(): 
            max_ = right 
            direction_ = 'right'

            if distance > max_:
                max_ = distance 
                direction_ = direction 

        if direction_ == 'right': 
            ser.write('y'.encode())

        else: 
            ser.write('x'.encode())

        return
     
